//@version=5
strategy("RB Gasoline April 13-25 Strategy", shorttitle="RB Apr Swing", overlay=true, 
         default_qty_type=strategy.fixed, default_qty_value=1, 
         pyramiding=0, calc_on_order_fills=false, process_orders_on_close=true)

// Strategy Settings
contracts_to_trade = input.int(1, title="Number of Contracts", minval=1, maxval=5, group="Position Settings")
enable_strategy = input.bool(true, title="Enable Strategy", group="Strategy Settings")

// Risk Management (optional safety stops)
use_stop_loss = input.bool(false, title="Use Emergency Stop Loss", group="Risk Management")
stop_loss_pct = input.float(10.0, title="Emergency Stop Loss (%)", minval=5.0, maxval=20.0, group="Risk Management")

// Date logic for April 13th entry and April 25th exit
is_april = month == 4
entry_date_target = 13  // April 13th
exit_date_target = 25   // April 25th

// Entry condition - April 13th or next trading day
entry_condition = is_april and dayofmonth == entry_date_target and enable_strategy and strategy.position_size == 0

// Handle holiday adjustment for entry (if April 13 is weekend, trade next day)
entry_condition_adjusted = if is_april and dayofmonth >= entry_date_target and dayofmonth <= entry_date_target + 2 and strategy.position_size == 0
    // Only enter once during this window
    dayofmonth == entry_date_target or (dayofmonth == entry_date_target + 1) or (dayofmonth == entry_date_target + 2)
else
    false

// Exit condition - April 25th or previous trading day  
exit_condition = is_april and dayofmonth == exit_date_target and strategy.position_size > 0

// Handle holiday adjustment for exit (if April 25 is weekend, trade previous day)
exit_condition_adjusted = if is_april and dayofmonth >= exit_date_target - 2 and dayofmonth <= exit_date_target and strategy.position_size > 0
    dayofmonth == exit_date_target or (dayofmonth == exit_date_target - 1) or (dayofmonth == exit_date_target - 2)
else
    false

// Position tracking
var float entry_price = na
var int actual_entry_day = na
var bool trade_completed_this_year = false

// Reset yearly flag in March
if month == 3
    trade_completed_this_year := false

// Entry Logic - Buy at close of April 13th (or next trading day)
if entry_condition_adjusted and not trade_completed_this_year
    strategy.entry("Long_RB", strategy.long, qty=contracts_to_trade, comment="Apr 13 Entry")
    entry_price := close
    actual_entry_day := dayofmonth

// Exit Logic - Sell at close of April 25th (or previous trading day)
if exit_condition_adjusted
    strategy.close("Long_RB", comment="Apr 25 Exit")
    entry_price := na
    trade_completed_this_year := true

// Emergency stop loss (optional)
if use_stop_loss and strategy.position_size > 0 and not na(entry_price)
    if close <= entry_price * (1 - stop_loss_pct / 100)
        strategy.close("Long_RB", comment="Emergency Stop")
        entry_price := na
        trade_completed_this_year := true

// Force exit if holding past April (safety measure)
if strategy.position_size > 0 and month == 5
    strategy.close("Long_RB", comment="Month End Safety")
    entry_price := na
    trade_completed_this_year := true

// Visual signals
plotshape(entry_condition_adjusted and not trade_completed_this_year, title="Entry Signal", 
          location=location.belowbar, style=shape.triangleup, color=color.green, 
          size=size.large, text="BUY RB")

plotshape(exit_condition_adjusted, title="Exit Signal", 
          location=location.abovebar, style=shape.triangledown, color=color.orange, 
          size=size.large, text="SELL RB")

// Plot entry level
entry_line = plot(strategy.position_size > 0 ? entry_price : na, "Entry Level", color.green, 2)

// Plot stop loss if enabled
stop_line = plot(use_stop_loss and strategy.position_size > 0 and not na(entry_price) ? entry_price * (1 - stop_loss_pct / 100) : na, "Stop Loss", color.red, 1)

// Background highlighting for trade period
bgcolor(is_april and dayofmonth >= 13 and dayofmonth <= 25 ? color.new(color.yellow, 95) : na, title="Active Trade Period")

bgcolor(is_april and dayofmonth >= 13 and dayofmonth <= 15 ? color.new(color.green, 90) : na, title="Entry Window")

bgcolor(is_april and dayofmonth >= 23 and dayofmonth <= 25 ? color.new(color.red, 90) : na, title="Exit Window")

// Information table
if barstate.islast
    var table info_table = table.new(position.top_right, 2, 10, bgcolor=color.white, border_width=1)
    
    month_names = array.from("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")
    current_month_name = array.get(month_names, month - 1)
    
    table.cell(info_table, 0, 0, "RB GASOLINE", text_color=color.white, text_size=size.normal, bgcolor=color.purple)
    table.cell(info_table, 1, 0, "APR 13-25", text_color=color.white, text_size=size.normal, bgcolor=color.purple)
    
    table.cell(info_table, 0, 1, "Current Date:", text_color=color.black, text_size=size.small)
    table.cell(info_table, 1, 1, current_month_name + " " + str.tostring(dayofmonth), text_color=color.blue, text_size=size.small)
    
    table.cell(info_table, 0, 2, "Trade Window:", text_color=color.black, text_size=size.small)
    in_window = is_april and dayofmonth >= 13 and dayofmonth <= 25
    window_text = in_window ? "ACTIVE" : "INACTIVE" 
    window_color = in_window ? color.green : color.gray
    table.cell(info_table, 1, 2, window_text, text_color=window_color, text_size=size.small)
    
    table.cell(info_table, 0, 3, "Entry Target:", text_color=color.black, text_size=size.small)
    table.cell(info_table, 1, 3, "April 13", text_color=color.green, text_size=size.small)
    
    table.cell(info_table, 0, 4, "Exit Target:", text_color=color.black, text_size=size.small)
    table.cell(info_table, 1, 4, "April 25", text_color=color.red, text_size=size.small)
    
    table.cell(info_table, 0, 5, "Position:", text_color=color.black, text_size=size.small)
    pos_text = strategy.position_size > 0 ? "LONG " + str.tostring(strategy.position_size, "#") : "NONE"
    pos_color = strategy.position_size > 0 ? color.green : color.gray
    table.cell(info_table, 1, 5, pos_text, text_color=pos_color, text_size=size.small)
    
    table.cell(info_table, 0, 6, "Entry Price:", text_color=color.black, text_size=size.small)
    entry_text = na(entry_price) ? "N/A" : "$" + str.tostring(entry_price, "#.###")
    table.cell(info_table, 1, 6, entry_text, text_color=color.blue, text_size=size.small)
    
    table.cell(info_table, 0, 7, "Entry Day:", text_color=color.black, text_size=size.small)
    entry_day_text = na(actual_entry_day) ? "N/A" : "April " + str.tostring(actual_entry_day)
    table.cell(info_table, 1, 7, entry_day_text, text_color=color.blue, text_size=size.small)
    
    table.cell(info_table, 0, 8, "Days Held:", text_color=color.black, text_size=size.small)
    days_held = strategy.position_size > 0 and not na(actual_entry_day) ? dayofmonth - actual_entry_day : 0
    table.cell(info_table, 1, 8, str.tostring(days_held), text_color=color.purple, text_size=size.small)
    
    table.cell(info_table, 0, 9, "Unrealized P&L:", text_color=color.black, text_size=size.small)
    unrealized_pnl = strategy.openprofit
    pnl_text = "$" + str.tostring(unrealized_pnl, "#.##")
    pnl_color = unrealized_pnl > 0 ? color.green : unrealized_pnl < 0 ? color.red : color.gray
    table.cell(info_table, 1, 9, pnl_text, text_color=pnl_color, text_size=size.small)

// Alert conditions
alertcondition(entry_condition_adjusted and not trade_completed_this_year, title="RB Entry Alert", 
               message="RB Gasoline: BUY 1 Contract - April 13th Entry")
alertcondition(exit_condition_adjusted, title="RB Exit Alert", 
               message="RB Gasoline: SELL Contract - April 25th Exit")
