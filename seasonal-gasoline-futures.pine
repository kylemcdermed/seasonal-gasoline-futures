//@version=5
strategy("Gasoline May Contract Seasonal", shorttitle="RB May Season", overlay=true, 
         default_qty_type=strategy.fixed, default_qty_value=1, 
         pyramiding=0, calc_on_order_fills=false, process_orders_on_close=true)

// Strategy Settings
contracts_to_trade = input.int(1, title="Number of Contracts", minval=1, maxval=10, group="Position Settings")
entry_day = input.int(15, title="Entry Day of April", minval=10, maxval=20, group="Timing Settings")
enable_strategy = input.bool(true, title="Enable Strategy", group="Strategy Settings")

// Risk Management
stop_loss_pct = input.float(5.0, title="Stop Loss (%)", minval=1.0, maxval=15.0, group="Risk Management")
take_profit_pct = input.float(10.0, title="Take Profit (%)", minval=5.0, maxval=25.0, group="Risk Management")

// Date and timing logic
is_april = month == 4
is_may = month == 5
is_entry_day = is_april and dayofmonth >= entry_day and dayofmonth <= entry_day + 2  // 3-day entry window
is_exit_period = is_april and dayofmonth >= 28  // Last few days of April
is_may_started = is_may and dayofmonth <= 5  // Early May exit if still holding

// Position tracking
var float entry_price = na
var int entry_date = na
var bool position_entered = false

// Entry condition - Buy gasoline in mid-April
entry_condition = is_entry_day and enable_strategy and strategy.position_size == 0 and not position_entered

// Exit conditions
exit_end_april = is_exit_period and strategy.position_size > 0
exit_early_may = is_may_started and strategy.position_size > 0
stop_loss_hit = strategy.position_size > 0 and not na(entry_price) and close <= entry_price * (1 - stop_loss_pct / 100)
take_profit_hit = strategy.position_size > 0 and not na(entry_price) and close >= entry_price * (1 + take_profit_pct / 100)

// Strategy Logic
if entry_condition
    strategy.entry("Long_RB", strategy.long, qty=contracts_to_trade, comment="Apr Mid Entry")
    entry_price := close
    entry_date := time
    position_entered := true

// Exit Logic
if exit_end_april
    strategy.close("Long_RB", comment="End April Exit")
    entry_price := na
    position_entered := false

if exit_early_may
    strategy.close("Long_RB", comment="Early May Exit")
    entry_price := na
    position_entered := false

if stop_loss_hit
    strategy.close("Long_RB", comment="Stop Loss")
    entry_price := na
    position_entered := false

if take_profit_hit
    strategy.close("Long_RB", comment="Take Profit")
    entry_price := na
    position_entered := false

// Reset position flag for next year
if month == 3  // Reset in March for next year's trade
    position_entered := false

// Visual signals
plotshape(entry_condition, title="Entry Signal", location=location.belowbar, 
          style=shape.triangleup, color=color.green, size=size.large, text="BUY RB")

plotshape(exit_end_april or exit_early_may, title="Seasonal Exit", location=location.abovebar, 
          style=shape.triangledown, color=color.orange, size=size.normal, text="EXIT")

plotshape(stop_loss_hit, title="Stop Loss", location=location.abovebar, 
          style=shape.xcross, color=color.red, size=size.normal, text="STOP")

plotshape(take_profit_hit, title="Take Profit", location=location.abovebar, 
          style=shape.diamond, color=color.blue, size=size.normal, text="TARGET")

// Plot entry price level
entry_line = plot(strategy.position_size > 0 ? entry_price : na, "Entry Level", 
     color.green, 2)

// Plot stop loss level
stop_line = plot(strategy.position_size > 0 and not na(entry_price) ? entry_price * (1 - stop_loss_pct / 100) : na, 
     "Stop Loss Level", color.red, 1)

// Plot take profit level  
target_line = plot(strategy.position_size > 0 and not na(entry_price) ? entry_price * (1 + take_profit_pct / 100) : na, 
     "Take Profit Level", color.blue, 1)

// Background highlighting for trade periods
bgcolor(is_april ? color.new(color.yellow, 95) : na, title="April - Trade Month")
bgcolor(is_entry_day ? color.new(color.green, 90) : na, title="Entry Window")
bgcolor(is_exit_period ? color.new(color.red, 90) : na, title="Exit Window")

// Information table
if barstate.islast
    var table info_table = table.new(position.top_right, 2, 9, bgcolor=color.white, border_width=1)
    
    month_names = array.from("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")
    current_month_name = array.get(month_names, month - 1)
    
    table.cell(info_table, 0, 0, "GASOLINE RB", text_color=color.white, text_size=size.normal, bgcolor=color.orange)
    table.cell(info_table, 1, 0, "MAY SEASONAL", text_color=color.white, text_size=size.normal, bgcolor=color.orange)
    
    table.cell(info_table, 0, 1, "Current Month:", text_color=color.black, text_size=size.small)
    table.cell(info_table, 1, 1, current_month_name, text_color=color.blue, text_size=size.small)
    
    table.cell(info_table, 0, 2, "Current Day:", text_color=color.black, text_size=size.small)
    table.cell(info_table, 1, 2, str.tostring(dayofmonth), text_color=color.blue, text_size=size.small)
    
    table.cell(info_table, 0, 3, "Trade Window:", text_color=color.black, text_size=size.small)
    trade_status = is_april ? "ACTIVE" : "INACTIVE"
    trade_color = is_april ? color.green : color.gray
    table.cell(info_table, 1, 3, trade_status, text_color=trade_color, text_size=size.small)
    
    table.cell(info_table, 0, 4, "Position:", text_color=color.black, text_size=size.small)
    pos_text = strategy.position_size > 0 ? "LONG " + str.tostring(strategy.position_size, "#") : "NONE"
    pos_color = strategy.position_size > 0 ? color.green : color.gray
    table.cell(info_table, 1, 4, pos_text, text_color=pos_color, text_size=size.small)
    
    table.cell(info_table, 0, 5, "Entry Price:", text_color=color.black, text_size=size.small)
    entry_text = na(entry_price) ? "N/A" : "$" + str.tostring(entry_price, "#.###")
    table.cell(info_table, 1, 5, entry_text, text_color=color.blue, text_size=size.small)
    
    table.cell(info_table, 0, 6, "Current Price:", text_color=color.black, text_size=size.small)
    table.cell(info_table, 1, 6, "$" + str.tostring(close, "#.###"), text_color=color.blue, text_size=size.small)
    
    table.cell(info_table, 0, 7, "Days in Trade:", text_color=color.black, text_size=size.small)
    days_in_trade = strategy.position_size > 0 ? math.floor((time - entry_date) / 86400000) : 0
    table.cell(info_table, 1, 7, str.tostring(days_in_trade), text_color=color.purple, text_size=size.small)
    
    table.cell(info_table, 0, 8, "Unrealized P&L:", text_color=color.black, text_size=size.small)
    unrealized_pnl = strategy.openprofit
    pnl_text = "$" + str.tostring(unrealized_pnl, "#.##")
    pnl_color = unrealized_pnl > 0 ? color.green : unrealized_pnl < 0 ? color.red : color.gray
    table.cell(info_table, 1, 8, pnl_text, text_color=pnl_color, text_size=size.small)

// Alert conditions
alertcondition(entry_condition, title="Gasoline Entry", message="Gasoline RB: Enter Long Position - April Mid-Month")
alertcondition(exit_end_april, title="Gasoline Exit", message="Gasoline RB: Exit Position - End of April")
alertcondition(stop_loss_hit, title="Gasoline Stop Loss", message="Gasoline RB: Stop Loss Hit")
alertcondition(take_profit_hit, title="Gasoline Take Profit", message="Gasoline RB: Take Profit Hit")
